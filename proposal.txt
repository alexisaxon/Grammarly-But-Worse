Project Name: Grammarly But Worse

Project Description: The goal of my project is to develop a program that can suggest
and implement edits to a written document. When the user uploads a file or types 
into a textbox, the program will look for errors in capitalization, spelling, and
some elements of grammar and suggest fixes, which will be implemented at the click
of a button. Additional features will likely be added after reaching MVP.

Competitive Analysis: In the 112 Term Project Gallery, there is a project from
Spring 2019 called "LiveThesaurus" that allows the user to highlight a word in 
their document and replace it with a synonym by tapping it. In typing mode, my
project will have a similar user interface (text document on the left hand side
and options for the user on the right hand side) and I will make similar use of
the BS4 module. I also hope to add a similar synonym-searching feature to my 
project after I get some of my earlier features working. However, my project will
be a little further-reaching than this one.

Grammarly also offers similar services as my project (only better, as implied by
my project title). Like my project, it offers spelling, grammar, and synonym
features, but it also detects and corrects more complex elements of the text, like
conciseness, readability, and fluency using artificial intelligence. They also look
for consistency in spelling of words with multiple spellings (ex behavior and
behaviour), which I may add to my project if time permits.

Structural Plan: I will use separate files for the front- and back-ends of my project. 
Long dictionaries and lists (ex containing words that have multiple correct spellings)  
will be placed in a third file so they do not clutter up the other files. My front-end 
file will have separate functions for Model, View, and Controller, as required by the 
112 Graphics module, and several helper functions so that no function becomes too long. 
In the back-end file, I will aim to have separate functions for each feature (ex spelling 
correction or capitalization) with additional helper functions as needed.

Algorithmic Plan: When a word is deemed to be spelling incorrectly (because it is not
in an online dictionary or online list of names), the program will develop a list of
possible intended words by replacing each letter with letters that are close to it on 
a standard keyboard (indicating a typo) or possessing a similar sound by going through
a dictionary containing these letters. Each generated "word" will then be passed through
the same online dictionary and baby name list, looking for matches. If a match is found,
it will be presented to the user as a possible correction. To speed up this algorithm, I 
will also have a local set with a few hundred very common English words, which will also
allow me to present these possibilities first to the user since they are more likely to be
the intended word than an average word.

Timeline Plan: I have imposed the following deadlines on myself:
TP1: Have a functional spell-check feature (not yet integrated into the user interface) - Done
TP2: Have a complete user interface that is fully integrated with existing back-end features - Progress
TP3: Add additional features as time permits and integrate them into the user interface - Not Yet Begun

Version Control Plan: I will use Git and a private Github repository to store my code.
The image is included as Github.JPG in this folder.

Modules: I will be using Requests and BS4, both of which I have passed tech demos for. If
time permits after reaching MVP, I may use ntlk to enhance my project further.

TP2 Update:
In collaboration with my TP mentor, I decided to add an additional row of buttons
above the textbox to allow the user to bold, underline, copy, paste, etc. In 
addition, due to the availability of time, I am unlikely to include the 'upload'
mode that I originally planned, which also means that my project will not need
a splash screen.

TP3 Update:
I have added one additional label to the user interface, after TP2, to direct the
user on how to react to various occurences in the program (ex when spelling
suggestions are made). I have also enhanced the types of spelling errors that the
program checks for and added additional options for saving the file.